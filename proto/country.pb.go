// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/country.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/country.proto

It has these top-level messages:
	Country
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	ReadAllRequest
	ReadAllResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Country struct {
	Id           int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PeopleNumber int64  `protobuf:"varint,3,opt,name=peopleNumber" json:"peopleNumber,omitempty"`
}

func (m *Country) Reset()                    { *m = Country{} }
func (m *Country) String() string            { return proto1.CompactTextString(m) }
func (*Country) ProtoMessage()               {}
func (*Country) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Country) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Country) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Country) GetPeopleNumber() int64 {
	if m != nil {
		return m.PeopleNumber
	}
	return 0
}

type CreateRequest struct {
	Api     string   `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Country *Country `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateRequest) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

type CreateResponse struct {
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Id  int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto1.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReadRequest struct {
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Id  int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReadResponse struct {
	Api     string   `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Country *Country `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadResponse) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

type UpdateRequest struct {
	Api     string   `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Country *Country `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	Id      int64    `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto1.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *UpdateRequest) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *UpdateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateResponse struct {
	Api     string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Updated int64  `protobuf:"varint,2,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto1.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *UpdateResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type DeleteRequest struct {
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Id  int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *DeleteRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteResponse struct {
	Api     string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Deleted int64  `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto1.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *DeleteResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

type ReadAllRequest struct {
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
}

func (m *ReadAllRequest) Reset()                    { *m = ReadAllRequest{} }
func (m *ReadAllRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadAllRequest) ProtoMessage()               {}
func (*ReadAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReadAllRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

type ReadAllResponse struct {
	Api     string     `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	Country []*Country `protobuf:"bytes,2,rep,name=country" json:"country,omitempty"`
}

func (m *ReadAllResponse) Reset()                    { *m = ReadAllResponse{} }
func (m *ReadAllResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadAllResponse) ProtoMessage()               {}
func (*ReadAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReadAllResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadAllResponse) GetCountry() []*Country {
	if m != nil {
		return m.Country
	}
	return nil
}

func init() {
	proto1.RegisterType((*Country)(nil), "server.Country")
	proto1.RegisterType((*CreateRequest)(nil), "server.CreateRequest")
	proto1.RegisterType((*CreateResponse)(nil), "server.CreateResponse")
	proto1.RegisterType((*ReadRequest)(nil), "server.ReadRequest")
	proto1.RegisterType((*ReadResponse)(nil), "server.ReadResponse")
	proto1.RegisterType((*UpdateRequest)(nil), "server.UpdateRequest")
	proto1.RegisterType((*UpdateResponse)(nil), "server.UpdateResponse")
	proto1.RegisterType((*DeleteRequest)(nil), "server.DeleteRequest")
	proto1.RegisterType((*DeleteResponse)(nil), "server.DeleteResponse")
	proto1.RegisterType((*ReadAllRequest)(nil), "server.ReadAllRequest")
	proto1.RegisterType((*ReadAllResponse)(nil), "server.ReadAllResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Countries service

type CountriesClient interface {
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type countriesClient struct {
	cc *grpc.ClientConn
}

func NewCountriesClient(cc *grpc.ClientConn) CountriesClient {
	return &countriesClient{cc}
}

func (c *countriesClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	out := new(ReadAllResponse)
	err := grpc.Invoke(ctx, "/server.Countries/ReadAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/server.Countries/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/server.Countries/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/server.Countries/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/server.Countries/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Countries service

type CountriesServer interface {
	ReadAll(context.Context, *ReadAllRequest) (*ReadAllResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterCountriesServer(s *grpc.Server, srv CountriesServer) {
	s.RegisterService(&_Countries_serviceDesc, srv)
}

func _Countries_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Countries/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Countries/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Countries/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Countries/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Countries/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Countries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Countries",
	HandlerType: (*CountriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAll",
			Handler:    _Countries_ReadAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Countries_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Countries_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Countries_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Countries_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/country.proto",
}

func init() { proto1.RegisterFile("proto/country.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0x80, 0xd9, 0xa4, 0x64, 0xd9, 0xd3, 0x6e, 0x6a, 0x27, 0x1a, 0x63, 0x2c, 0x52, 0xe7, 0xaa,
	0x16, 0xdc, 0xd0, 0xf5, 0x4e, 0x7a, 0xa3, 0xf5, 0x4e, 0x29, 0x34, 0x50, 0x84, 0xe2, 0xcd, 0xb4,
	0x39, 0x84, 0x40, 0x9a, 0x19, 0xf3, 0x53, 0x10, 0xf1, 0xc6, 0x57, 0xf0, 0x89, 0x7c, 0x06, 0x5f,
	0xc1, 0x07, 0x91, 0xcc, 0x4f, 0xd2, 0xec, 0x9a, 0x45, 0xa1, 0x57, 0x3b, 0x73, 0xf6, 0x9c, 0xef,
	0x7c, 0x33, 0x7b, 0x66, 0xc1, 0x13, 0x25, 0xaf, 0x79, 0x74, 0xcd, 0x9b, 0xa2, 0x2e, 0xbf, 0x2c,
	0xe4, 0x8e, 0x38, 0x15, 0x96, 0xb7, 0x58, 0x86, 0xfb, 0x29, 0xe7, 0x69, 0x8e, 0x11, 0x13, 0x59,
	0xc4, 0x8a, 0x82, 0xd7, 0xac, 0xce, 0x78, 0x51, 0xa9, 0x2c, 0x7a, 0x0e, 0xd3, 0x53, 0x55, 0x46,
	0x5c, 0xb0, 0xb2, 0x24, 0x98, 0x1c, 0x4c, 0x0e, 0xed, 0xd8, 0xca, 0x12, 0x42, 0x60, 0xab, 0x60,
	0x37, 0x18, 0x58, 0x07, 0x93, 0xc3, 0x59, 0x2c, 0xd7, 0x84, 0xc2, 0x8e, 0x40, 0x2e, 0x72, 0x3c,
	0x6b, 0x6e, 0xae, 0xb0, 0x0c, 0x6c, 0x99, 0x3d, 0x88, 0xd1, 0x0f, 0x30, 0x3f, 0x2d, 0x91, 0xd5,
	0x18, 0xe3, 0xe7, 0x06, 0xab, 0x9a, 0x3c, 0x00, 0x9b, 0x89, 0x4c, 0x92, 0x67, 0x71, 0xbb, 0x24,
	0x2f, 0x60, 0xaa, 0x65, 0x25, 0x7d, 0x7b, 0xb9, 0xbb, 0x50, 0xb6, 0x0b, 0x2d, 0x13, 0x9b, 0xef,
	0xe9, 0x12, 0x5c, 0x43, 0xab, 0x04, 0x2f, 0x2a, 0xfc, 0x0b, 0x4e, 0x99, 0x5b, 0xc6, 0x9c, 0x46,
	0xb0, 0x1d, 0x23, 0x4b, 0xc6, 0xfb, 0xaf, 0x16, 0xbc, 0x87, 0x1d, 0x55, 0x30, 0xda, 0xe2, 0x3f,
	0x8c, 0x3f, 0xc1, 0xfc, 0x42, 0x24, 0xf7, 0x74, 0x7e, 0xad, 0x6a, 0x77, 0xaa, 0x27, 0xe0, 0x1a,
	0xfa, 0xa8, 0x6c, 0x00, 0xd3, 0x46, 0xe6, 0x98, 0x33, 0x9a, 0x2d, 0x3d, 0x86, 0xf9, 0x3b, 0xcc,
	0x71, 0x93, 0xdb, 0xea, 0xdd, 0x9c, 0x80, 0x6b, 0x4a, 0x36, 0x35, 0x4c, 0x64, 0x4e, 0xd7, 0x50,
	0x6f, 0x29, 0x05, 0xb7, 0xbd, 0xd9, 0x37, 0x79, 0x3e, 0xda, 0x91, 0x9e, 0xc1, 0x6e, 0x97, 0xf3,
	0x6f, 0x3f, 0x80, 0xbd, 0xe9, 0xca, 0x96, 0x3f, 0x6d, 0x98, 0xa9, 0x60, 0x86, 0x15, 0xb9, 0x80,
	0xa9, 0xa6, 0x13, 0xdf, 0x94, 0x0c, 0x95, 0xc2, 0xc7, 0x6b, 0x71, 0xa5, 0x41, 0x9f, 0x7c, 0xff,
	0xf5, 0xfb, 0x87, 0xe5, 0x91, 0x3d, 0xf9, 0x7a, 0x6e, 0x8f, 0xf5, 0x13, 0x53, 0x58, 0x47, 0xcd,
	0x25, 0x79, 0xd4, 0x89, 0xdc, 0x9d, 0xfa, 0xd0, 0x5f, 0x0d, 0x6b, 0xe6, 0xbe, 0x64, 0xfa, 0x74,
	0x9d, 0xf9, 0x7a, 0x72, 0x44, 0xce, 0x61, 0xab, 0x95, 0x20, 0xde, 0x5d, 0x25, 0x83, 0x7c, 0x38,
	0x0c, 0x6a, 0xe0, 0x33, 0x09, 0x0c, 0x88, 0xbf, 0x06, 0x8c, 0xbe, 0x66, 0xc9, 0x37, 0x72, 0x09,
	0x8e, 0x9a, 0x98, 0xde, 0x74, 0x30, 0x9f, 0xbd, 0xe9, 0x70, 0xb0, 0xe8, 0x73, 0x09, 0x7e, 0x1a,
	0x8e, 0x80, 0x5b, 0xdd, 0x8f, 0xe0, 0xa8, 0xe1, 0xe8, 0xd9, 0x83, 0xf9, 0xea, 0xd9, 0xc3, 0x19,
	0x32, 0xd2, 0x47, 0x23, 0xec, 0xb7, 0xde, 0xe5, 0x5e, 0xca, 0x73, 0x56, 0xa4, 0x2f, 0xd3, 0x52,
	0x5c, 0x47, 0xf2, 0xcf, 0xea, 0xca, 0x91, 0x1f, 0xaf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0x8b, 0x11, 0x81, 0xf0, 0x04, 0x00, 0x00,
}
